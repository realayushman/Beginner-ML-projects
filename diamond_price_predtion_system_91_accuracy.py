# -*- coding: utf-8 -*-
"""diamond price predtion System 91% accuracy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nJUmMvDPzB_BXSxP7LKgmgjhJXBOvRjJ

**I have built the model in the first part, ignore that.**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

from sklearn.datasets import fetch_openml

diamond_data = fetch_openml(name='diamonds', version=1)

diamond_data.DESCR

diamond_data

diamond=pd.DataFrame(diamond_data.data,columns=diamond_data.feature_names)

diamond['price']=diamond_data.target

diamond

diamond.info()

from sklearn.preprocessing import OrdinalEncoder

encoder= OrdinalEncoder()

encoder

diamond['cut'].unique()



encoder = OrdinalEncoder(categories=[["Fair", "Good", "Very Good", "Premium", "Ideal"]])

cut=encoder.fit_transform(diamond[["cut"]])
cut

diamond['cut_encoded']=cut

diamond

diamond['clarity'].unique()

encoder = OrdinalEncoder(categories=[['I1', 'SI2', 'SI1', 'VS2', 'VS1', 'VVS2', 'VVS1', 'IF']])
clarity=encoder.fit_transform(diamond[["clarity"]])
print(clarity)
diamond['clarity_encoded']=clarity

diamond

diamond['color'].unique()

encoder = OrdinalEncoder(categories=[['J', 'I', 'H', 'G', 'F', 'E', 'D']])
color=encoder.fit_transform(diamond[["color"]])
print(color)
diamond['color_encoded']=color

diamond

df=diamond.drop(['cut','clarity','color'],axis=1)

df

df.info()

df.describe()

df.corr()

df.drop('price',axis=1,inplace=True)

df['price']=diamond_data.target

df.head()

df.dropna()

df.drop_duplicates(inplace=True)

sns.heatmap(df.corr(),annot=True)

df.shape

x=df.iloc[:,:-1]
y=df.iloc[:,-1]

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

from sklearn.preprocessing import StandardScaler

scaler=StandardScaler()

x_train=pd.DataFrame(scaler.fit_transform(x_train),columns=x_train.columns)

x_test=scaler.transform(x_test)

x_train

x_test

from sklearn.linear_model import LinearRegression
model = LinearRegression()

model.fit(x_train, y_train)

model.coef_

model.intercept_

y_pred=model.predict(x_test)
y_pred

from sklearn.metrics import r2_score

r2=r2_score(y_test,y_pred)

r2

# 90% yehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh!!

residuals = y_test - y_pred

# Create a Seaborn plot to visualize the distribution of residuals
sns.set(style="whitegrid")
plt.figure(figsize=(10, 6))

# Plot the residuals distribution
sns.histplot(residuals, kde=True, color="blue", bins=30)

# Add titles and labels
plt.title("Distribution of Residuals", fontsize=16)
plt.xlabel("Residuals", fontsize=14)
plt.ylabel("Frequency", fontsize=14)

# Show the plot
plt.show()