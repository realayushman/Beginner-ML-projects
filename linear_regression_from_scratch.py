# -*- coding: utf-8 -*-
"""Linear Regression from scratch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HWJxdsjSDpP9-XHG7z3Q2uomfzLUAeU-
"""

import pandas as pd

import numpy as np

class Linear_Regression:
    def __init__(self,learning_rate=0.001,no_of_iterations=20000):
      self.learning_rate=learning_rate
      self.no_of_iterations=no_of_iterations

    def fit(self,x,y):
      self.x=x
      self.y=y
      self.n,self.m=x.shape #number of rows and columns # n= no. of rows, m= no. of columns
      self.w=np.zeros(self.m) #a dataset might have multiple features, hence multiple co-efficients/slopes.
      self.b=0 #but only one intercept
      for i in range(self.no_of_iterations):
        self.update_weights()

    def update_weights(self):
      y_pred=self.predict(self.x)
      dw=-(2*(self.x.T).dot(self.y-y_pred))/self.n
      db=-2*np.sum(self.y-y_pred)/self.n
      # updating weights
      self.w=self.w-self.learning_rate*dw
      self.b=self.b-self.learning_rate*db

    def predict(self,x):
      return x.dot(self.w)+self.b

Mymodel=Linear_Regression()

"""**Checking For a simple monovariate dataet.**"""

df_sal=pd.read_csv('Salary_Data.csv')

df_sal.head()

x=df_sal.drop('Salary',axis=1)
y=df_sal['Salary']

x

y

from sklearn.model_selection import train_test_split
a,b,c,d=train_test_split(x,y,test_size=0.2,random_state=12)

a

b

Mymodel.fit(a,c)

my_pred=Mymodel.predict(b)

from sklearn.metrics import r2_score
r2_score(d,my_pred)

from sklearn.linear_model import LinearRegression

model=LinearRegression()

model.fit(a,c)

y_pred=model.predict(b)

r2_score(d,y_pred)

#my regression model and sklearns model has nearly same accuracies.(94% both)